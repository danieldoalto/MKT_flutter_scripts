{"session_id":"1758222351026","started":"2025-09-18T19:34:06.096836","total_operations":15,"operations":[{"timestamp":"2025-09-18T16:05:51.055278","type":"SESSION_START","message":"SSH session started for Casa Daniel (192.168.10.1)"},{"timestamp":"2025-09-18T16:05:51.064426","type":"CONNECTION","message":"INIT - Initializing SSH connection to 192.168.10.1:22"},{"timestamp":"2025-09-18T16:05:51.084420","type":"CONNECTION","message":"SOCKET_CONNECTED - TCP socket established"},{"timestamp":"2025-09-18T16:05:51.099533","type":"CONNECTION","message":"AUTH_START - Starting authentication for user: adminssh"},{"timestamp":"2025-09-18T16:05:52.110605","type":"CONNECTION","message":"AUTH_REQUEST - Password requested for user: adminssh"},{"timestamp":"2025-09-18T16:05:52.187281","type":"CONNECTION","message":"AUTH_SUCCESS - Authentication successful"},{"timestamp":"2025-09-18T16:05:52.189308","type":"CONNECTION","message":"SESSION_ESTABLISHED - SSH session ready for commands"},{"timestamp":"2025-09-18T16:05:57.060993","type":"COMMAND","message":"/system script print detail"},{"timestamp":"2025-09-18T16:05:57.063466","type":"COMMAND","message":"/system script print detail"},{"timestamp":"2025-09-18T16:06:04.807800","type":"RESPONSE","message":"Flags: I - invalid \r\n 0   name=\"firewall\" owner=\"admin\" \r\n     policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon \r\n     dont-require-permissions=yes run-count=0 source=\r\n       /ip firewall filter\r\n       add action=accept chain=input comment=\\\r\n           \"defconf: accept established,related,untracked\" connection-state=\\\r\n           established,related,untracked\r\n       add action=drop chain=input comment=\"defconf: drop invalid\" connection-state=\\\r\n           invalid\r\n       add action=drop chain=input comment=\"drop ssh brute forcers\" dst-port=22,23 \\\r\n           log=yes log-prefix=\"ssh bruteforce drop\" protocol=tcp src-address-list=\\\r\n           ssh_blacklist\r\n       add action=add-src-to-address-list address-list=ssh_blacklist \\\r\n           address-list-timeout=1d chain=input connection-state=new dst-port=22,23 \\\r\n           in-interface=pppoe-out1 protocol=tcp src-address-list=ssh_stage3\r\n       add action=add-src-to-address-list address-list=ssh_stage3 \\\r\n           address-list-timeout=10m chain=input connection-state=new dst-port=22,23 \\\r\n           in-interface=pppoe-out1 protocol=tcp src-address-list=ssh_stage2\r\n       add action=add-src-to-address-list address-list=ssh_stage2 \\\r\n           address-list-timeout=10m chain=input connection-state=new dst-port=22,23 \\\r\n           in-interface=pppoe-out1 protocol=tcp src-address-list=ssh_stage1\r\n       add action=add-src-to-address-list address-list=ssh_stage1 \\\r\n           address-list-timeout=10m chain=input connection-state=new dst-port=22,23 \\\r\n           in-interface=pppoe-out1 protocol=tcp\r\n       add action=drop chain=input comment=\"Drop Winbox brute forcers\" log=yes \\\r\n           log-prefix=\"Winbox drop\" src-address-list=\"Winbox Black List\"\r\n       add action=add-src-to-address-list address-list=\"Winbox Black List\" \\\r\n           address-list-timeout=1d chain=input connection-state=new dst-port=\\\r\n           21345,1723 in-interface=pppoe-out1 protocol=tcp src-address-list=\\\r\n           \"Winbox Stage 3\"\r\n       add action=add-src-to-address-list address-list=\"Winbox Stage 3\" \\\r\n           address-list-timeout=5m chain=input connection-state=new dst-port=\\\r\n           21345,1723 in-interface=pppoe-out1 protocol=tcp src-address-list=\\\r\n           \"Winbox Stage 2\"\r\n       add action=add-src-to-address-list address-list=\"Winbox Stage 2\" \\\r\n           address-list-timeout=5m chain=input connection-state=new dst-port=\\\r\n           21345,1723 in-interface=pppoe-out1 protocol=tcp src-address-list=\\\r\n           \"Winbox Stage 1\"\r\n       add action=add-src-to-address-list address-list=\"Winbox Stage 1\" \\\r\n           address-list-timeout=5m chain=input connection-state=new dst-port=\\\r\n           21345,1723 in-interface=pppoe-out1 protocol=tcp\r\n       add action=accept chain=input comment=\"defconf: accept ICMP\" protocol=icmp\r\n       add action=accept chain=input comment=\\\r\n           \"defconf: accept to local loopback (for CAPsMAN)\" dst-address=127.0.0.1\r\n       add action=accept chain=input comment=\"libera port 21345 para winbox\" \\\r\n           dst-port=21345 in-interface=pppoe-out1 protocol=tcp\r\n       add action=accept chain=input comment=\"libera port TELNET\" dst-port=23 \\\r\n           in-interface=pppoe-out1 protocol=tcp\r\n       add action=drop chain=input comment=\"defconf: drop all not coming from LAN\" \\\r\n           in-interface-list=!LAN\r\n       add action=accept chain=forward comment=\"defconf: accept in ipsec policy\" \\\r\n           ipsec-policy=in,ipsec\r\n       add action=accept chain=forward comment=\"defconf: accept out ipsec policy\" \\\r\n           ipsec-policy=out,ipsec\r\n       add action=fasttrack-connection chain=forward comment=\"defconf: fasttrack\" \\\r\n           connection-state=established,related\r\n       add action=accept chain=forward comment=\\\r\n           \"defconf: accept established,related, untracked\" connection-state=\\\r\n           established,related,untracked\r\n       add action=drop chain=forward comment=\"defconf: drop invalid\" \\\r\n           connection-state=invalid\r\n       add action=drop chain=forward comment=\\\r\n           \"defconf: drop all from WAN not DSTNATed\" connection-nat-state=!dstnat \\\r\n           connection-state=new in-interface-list=WAN\r\n       /ip firewall nat\r\n       add action=masquerade chain=srcnat comment=\"defconf: masquerade\" \\\r\n           ipsec-policy=out,none out-interface-list=WAN\r\n       add action=dst-nat chain=dstnat dst-port=8180 in-interface=pppoe-out1 log=yes \\\r\n           protocol=tcp to-addresses=192.168.0.10 to-ports=8180\r\n       add action=dst-nat chain=dstnat dst-port=2570 in-interface=pppoe-out1 log=yes \\\r\n           protocol=tcp to-addresses=192.168.0.10 to-ports=8180\r\n\r\n 1   name=\"Bruteforce\" owner=\"admin\" \r\n     policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon \r\n     dont-require-permissions=yes run-count=0 \r\n     source=\r\n       add action=drop chain=input comment=\"drop ssh brute forcers\" dst-port=22,23 \\\r\n           protocol=tcp src-address-list=ssh_blacklist\r\n       add action=add-src-to-address-list address-list=ssh_blacklist \\\r\n           address-list-timeout=1d chain=input connection-state=new dst-port=22,23 \\\r\n           in-interface=pppoe-out1 protocol=tcp src-address-list=ssh_stage3\r\n       add action=add-src-to-address-list address-list=ssh_stage3 \\\r\n           address-list-timeout=10m chain=input connection-state=new dst-port=22,23 \\\r\n           in-interface=pppoe-out1 protocol=tcp src-address-list=ssh_stage2\r\n       add action=add-src-to-address-list address-list=ssh_stage2 \\\r\n           address-list-timeout=10m chain=input connection-state=new dst-port=22,23 \\\r\n           in-interface=pppoe-out1 protocol=tcp src-address-list=ssh_stage1\r\n       add action=add-src-to-address-list address-list=ssh_stage1 \\\r\n           address-list-timeout=10m chain=input connection-state=new dst-port=22,23 \\\r\n           in-interface=pppoe-out1 protocol=tcp\r\n       add action=drop chain=input comment=\"Drop Winbox brute forcers\" log=yes \\\r\n           src-address-list=\"Winbox Black List\"\r\n       add action=add-src-to-address-list address-list=\"Winbox Black List\" \\\r\n           address-list-timeout=1d chain=input connection-state=new dst-port=\\\r\n           21345,1723 in-interface=pppoe-out1 protocol=tcp src-address-list=\\\r\n           \"Winbox Stage 3\"\r\n       add action=add-src-to-address-list address-list=\"Winbox Stage 3\" \\\r\n           address-list-timeout=5m chain=input connection-state=new dst-port=\\\r\n           21345,1723 in-interface=pppoe-out1 protocol=tcp src-address-list=\\\r\n           \"Winbox Stage 2\"\r\n       add action=add-src-to-address-list address-list=\"Winbox Stage 2\" \\\r\n           address-list-timeout=5m chain=input connection-state=new dst-port=\\\r\n           21345,1723 in-interface=pppoe-out1 protocol=tcp src-address-list=\\\r\n           \"Winbox Stage 1\"\r\n       add action=add-src-to-address-list address-list=\"Winbox Stage 1\" \\\r\n           address-list-timeout=5m chain=input connection-state=new dst-port=\\\r\n           21345,1723 in-interface=pppoe-out1 protocol=tcp\r\n\r\n 2   name=\"Port Forwer\" owner=\"admin\" \r\n     policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon \r\n     dont-require-permissions=yes run-count=0 source=\r\n       /ip firewall nat\r\n       \r\n       add action=dst-nat chain=dstnat dst-port=8180 in-interface=pppoe-out1 log=yes \\\r\n           protocol=tcp to-addresses=192.168.0.10 to-ports=8180\r\n       \r\n       add action=dst-nat chain=dstnat dst-port=2570 in-interface=pppoe-out1 log=yes \\\r\n           protocol=tcp to-addresses=192.168.0.10 to-ports=8180\r\n\r\n 3   name=\"DDNS\" owner=\"admin\" \r\n     policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive \r\n     dont-require-permissions=yes last-started=2025-09-18 16:05:08 \r\n     run-count=2990 \r\n     source=\r\n       #---------------------------------------------------SCRIPT INFORMATION----------------------------------------------------\r\n       #\r\n       # Script:  Marthur's No-IP.com Dynamic DNS Update Script\r\n       # Version: 1.0\r\n       # Updated: 07/30/2018\r\n       # Created: 10/21/2017\r\n       # Author:  Marthur Jones\r\n       # Website: https://www.marthur.com\r\n       #\r\n       # This script is to be used in conjunction with No-IP.com's Dynamic DNS Service. It is to be scheduled/ran on a Mikrotik \r\n       # router as replacement for No-IP's Dynamic Update Client for Windows. There are many versions of this script. However, \r\n       # I've made my own modifications to the original script that was created on March 13, 2012 by riverron and published on\r\n       # the MikroTik Wiki here:\r\n       #\r\n       # https://wiki.mikrotik.com/wiki/Dynamic_DNS_Update_Script_for_No-IP_DNS\r\n       #\r\n       # - Changed the scope of the variable that stores the previous IP address from global to local. The local variable's value \r\n       #   (IP address) is now assigned via MikroTik's DNS resolution. The script compares the previous IP with the current IP \r\n       #   that is assigned to the WAN interface, if the IP addresses do not match, the script will update the No-IP hostname\r\n       #   with the IP assigned to the WAN interface.\r\n       #\r\n       # - Added variable to define the log destination path that the script pulls from No-IP.com after a DDNS IP update.\r\n       #\r\n       # - Made variable name changes.\r\n       #\r\n       #-----------------------------------------------TESTED USING THE FOLLOWING------------------------------------------------\r\n       #\r\n       # Hardware: CCR1009-7G-1C-1S+\r\n       # Firmware: v3.41\r\n       # RouterOS: v6.40.4\r\n       #\r\n       #----------------------------------------------MODIFY THIS SECTION AS NEEDED----------------------------------------------\r\n       \r\n       # desabilita temporalmente o finput para poder se comunicar\r\n       /ip firewall filter disable [find comment=\"PK\"];\r\n       \r\n       \r\n       \r\n       # No-IP account credentials.\r\n       :local noipUsername \"danieldoalto\"\r\n       :local noipPassword \"pintado\"\r\n       \r\n       ####\r\n       #   terra-flor.ddns.net : vistarterraflor : \r\n       #   dan3.ddns.net : danieldoalto : pintado\r\n       #\r\n       #\r\n       ######\r\n       \r\n       # Set the hostname or label of network to be updated.\r\n       # Hostnames with spaces are unsupported. Replace the value in the quotations below with your host names.\r\n       # To specify multiple hosts, separate them with commas.\r\n       \r\n       :local noipHostname \"dan3.ddns.net\"\r\n       \r\n       # The interface name with the assigned dynamic IP address (usually the WAN interface).\r\n       :local wanInterface \"ether1\"\r\n       \r\n       # Log destination\r\n       :local logDestination \"/disk1/logs/\"\r\n       \r\n       #-------------------------------------------------------------------------------------------------------------------------\r\n       \r\n       :log warning message=\"START: No-IP DDNS Update\"\r\n       \r\n       :if ([/interface get $wanInterface value-name=running] = true) do={\r\n       \r\n       #   Get the previous IP via DNS resolution.\r\n           :local previousIP [:resolve \"$noipHostname\"]\r\n       \r\n       #   Get the current IP on the WAN interface.\r\n        \r\n       \r\n       #   :local currentIP [/ip address get [find interface=\"$wanInterface\" disabled=no] address]\r\n       \r\n        :local currentIP [/ip cloud get public-address]\r\n       \r\n       \r\n       \r\n       \r\n       #   Strip net mask from IP address.\r\n           :for i from=([:len $currentIP] - 1) to=0 do={\r\n               :if ([:pick $currentIP $i] = \"/\") do={\r\n                   :set currentIP [:pick $currentIP 0 $i]\r\n               }\r\n           }\r\n       \r\n           :log info \"No-IP: DNS IP ($previousIP), interface IP ($currentIP)\"\r\n           \r\n           :if ($currentIP != $previousIP) do={\r\n               :log info \"No-IP: Current IP $currentIP is not equal to previous IP, update needed\"\r\n       \r\n       #       The update URL. The \"\\3F\" is hex for question mark (?). This is required since ? is a special character in the command.\r\n               :local url \"http://dynupdate.no-ip.com/nic/update\\3Fmyip=$currentIP\"\r\n               :local noipHostnames\r\n               :set noipHostnames [:toarray $noipHostname]\r\n               :foreach hostname in=$noipHostnames do={\r\n                   :log info \"No-IP: Sending update for $hostname\"\r\n                   /tool fetch url=($url . \"&hostname=$hostname\") user=$noipUsername password=$noipPassword mode=http dst-path=($logDestination . \"no-ip_ddns_update-\" . $hostname . \".txt\")\r\n                   :log info \"No-IP: Host $hostname updated on No-IP with IP $currentIP\"\r\n               }\r\n           }   else={\r\n               :log info \"No-IP: Previous IP $previousIP is equal to current IP, no update needed\"\r\n               }\r\n       \r\n       }   else={\r\n           :log info \"No-IP: $wanInterface is not currently running, unable to verify and/or update IP.\"\r\n           }\r\n        /ip firewall filter enable [find comment=\"PK\"];   \r\n       :log warning message=\"END: No-IP DDNS Update\"\r\n\r\n 4   name=\"BruteForce 2\" owner=\"admin\" \r\n     policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon \r\n     dont-require-permissions=yes run-count=0 source=\r\n       /ip firewall filter\r\n       \r\n       add action=drop chain=input comment=\"drop ssh brute forcers\" dst-port=22,23 \\\r\n           protocol=tcp src-address-list=ssh_blacklist\r\n       add action=add-src-to-address-list address-list=ssh_blacklist \\\r\n           address-list-timeout=1d chain=input connection-state=new dst-port=22,23 \\\r\n           in-interface=pppoe-out1 protocol=tcp src-address-list=ssh_stage3\r\n       add action=add-src-to-address-list address-list=ssh_stage3 \\\r\n           address-list-timeout=10m chain=input connection-state=new dst-port=22,23 \\\r\n           in-interface=pppoe-out1 protocol=tcp src-address-list=ssh_stage2\r\n       add action=add-src-to-address-list address-list=ssh_stage2 \\\r\n           address-list-timeout=10m chain=input connection-state=new dst-port=22,23 \\\r\n           in-interface=pppoe-out1 protocol=tcp src-address-list=ssh_stage1\r\n       add action=add-src-to-address-list address-list=ssh_stage1 \\\r\n           address-list-timeout=10m chain=input connection-state=new dst-port=22,23 \\\r\n           in-interface=pppoe-out1 protocol=tcp\r\n       #winbox\r\n       add action=drop chain=input comment=\"Drop Winbox brute forcers\" log=yes \\\r\n           src-address-list=\"Winbox Black List\"\r\n       add action=add-src-to-address-list address-list=\"Winbox Black List\" \\\r\n           address-list-timeout=1d chain=input connection-state=new dst-port=\\\r\n           21345,1723 in-interface=pppoe-out1 protocol=tcp src-address-list=\\\r\n           \"Winbox Stage 3\"\r\n       add action=add-src-to-address-list address-list=\"Winbox Stage 3\" \\\r\n           address-list-timeout=5m chain=input connection-state=new dst-port=\\\r\n           21345,1723 in-interface=pppoe-out1 protocol=tcp src-address-list=\\\r\n           \"Winbox Stage 2\"\r\n       add action=add-src-to-address-list address-list=\"Winbox Stage 2\" \\\r\n           address-list-timeout=5m chain=input connection-state=new dst-port=\\\r\n           21345,1723 in-interface=pppoe-out1 protocol=tcp src-address-list=\\\r\n           \"Winbox Stage 1\"\r\n       add action=add-src-to-address-list address-list=\"Winbox Stage 1\" \\\r\n           address-list-timeout=5m chain=input connection-state=new dst-port=\\\r\n           21345,1723 in-interface=pppoe-out1 protocol=tcp\r\n       \r\n       #libera as portas para conexao externa\r\n       add action=accept chain=input comment=\"libera port 21345 para winbox\" \\\r\n           dst-port=21345 in-interface=pppoe-out1 protocol=tcp\r\n       add action=accept chain=input comment=\"libera port TELNET\" dst-port=23 \\\r\n           in-interface=pppoe-out1 protocol=tcp\r\n\r\n 5   name=\"Port knock\" owner=\"admin\" \r\n     policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon \r\n     dont-require-permissions=yes run-count=0 source=\r\n       /ip firewall filter\r\n       #port1 5427\r\n       add action=add-src-to-address-list address-list=\"1port:5427\" \\\r\n       address-list-timeout=1m chain=input dst-port=5427 protocol=tcp comment=\"Port Knock\"\r\n       \\t\r\n       #port2 24879\r\n       add src-address-list=1port:5427 action=add-src-to-address-list address-list=\"2port:24879\" \\\r\n       address-list-timeout=1m chain=input dst-port=24879 protocol=tcp\r\n       \r\n       #port3 \\t14978\r\n       add chain=input dst-port=14978 protocol=tcp src-address-list=2port:24879 \\\r\n       action=add-src-to-address-list address-list=\"3port:14978\" address-list-timeout=1m \r\n       \r\n       #port4 \\t43698\r\n       add chain=input dst-port=43698 protocol=tcp src-address-list=3port:14978 \\\r\n       action=add-src-to-address-list address-list=\"secure\" address-list-timeout=10:00:00 \r\n       \\t \r\n       add chain=input src-address-list=secure action=accept\r\n       add chain=forward src-address-list=secure action=accept\r\n       add action=drop chain=input\\tsrc-address-list=!secure\r\n       add action=drop chain=forward src-address-list=!secure\r\n       \r\n\r\n 6   name=\"pc_WOL\" owner=\"admin\" \r\n     policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon \r\n     dont-require-permissions=no last-started=2025-09-13 15:50:17 \r\n     run-count=10 source=\r\n        tool/wol mac=D8:BB:C1:92:9D:43 interface=ether2\r\n       :log info \"Magik Packet enviado PCDAN\"\r\n\r\n 7   name=\"PCDAN_SUSPEND\" owner=\"admin\" \r\n     policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon \r\n     dont-require-permissions=no last-started=2025-09-12 20:22:47 run-count=9 \r\n     source=/system/ssh  address=192.168.10.117 user=daniel  \"shutdown /h\" \r\n\r\n 8   ;;; deriva internet casa vistar\r\n     name=\"pptp-cli-Enable\" owner=\"admin\" \r\n     policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon \r\n     dont-require-permissions=yes last-started=2023-11-23 20:32:30 \r\n     run-count=19 source=\r\n       /interface pptp-client enable [find comment=pptp-cli]\r\n       delay 3\r\n       /routing table enable [find comment=pptp-cli]\r\n       /routing rule enable [find comment=router] \r\n       /routing rule enable [find comment=pptp-cli] \r\n       /ip route enable [find comment=pptp-cli]\r\n       /ip firewall nat enable [find comment=pptp-cli]\r\n       \r\n       \r\n\r\n 9   ;;; anula internet casa vistar\r\n     name=\"pptp-cli-Disable\" owner=\"admin\" \r\n     policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon \r\n     dont-require-permissions=yes last-started=2023-11-24 06:50:55 \r\n     run-count=13 source=\r\n       /routing rule/disable [find comment =pptp-cli]\r\n       delay 3\r\n       /routing rule/disable [find comment =router]\r\n       /ip route disable [find comment=pptp-cli]\r\n       /ip firewall nat/ disable [find comment=pptp-cli]\r\n       /routing table/ disable [find comment=pptp-cli]\r\n       /interface pptp-client disable [find comment=pptp-cli]\r\n\r\n10   name=\"reset log\" owner=\"admin\" \r\n     policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon \r\n     dont-require-permissions=no last-started=2025-09-14 11:00:41 run-count=1 \r\n     source=\r\n       system logging action set memory-lines=1 numbers=0\r\n       system logging action set memory-lines=1000 numbers=0\r\n\r\n11   name=\"DDNS_IP_LOCAL\" owner=\"admin\" \r\n     policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon \r\n     dont-require-permissions=no last-started=2025-09-18 15:56:15 \r\n     run-count=6625 source=\r\n       \r\n       :log warning \"Iniciando script de atualiza\\E7\\E3o No-IP\"\r\n       \r\n       # Definir vari\\E1veis\r\n       :global ddnsUser \"265v9f4\"\r\n       :global ddnsPass \"Uy17MhKXS6Lg\"\r\n       :global ddnsHost \"danieldoalto.ddns.net\"\r\n       :global ddnsInterface \"pppoe-out1\" \r\n       # Nome da interface PPPoE\r\n       \r\n       # Obter endere\\E7o IP da interface PPPoE\r\n       :local ddnsIP [/ip address get [find interface=$ddnsInterface] address]\r\n       :set ddnsIP [:pick $ddnsIP 0 [:find $ddnsIP \"/\"]]\r\n       \r\n       # Verificar se h\\E1 endere\\E7o IP v\\E1lido\r\n       :if ($ddnsIP = \"\") do={\r\n         :log error \"Erro: Sem endere\\E7o IP na interface $ddnsInterface\"\r\n         :exit\r\n       }\r\n       \r\n       \r\n       # Obter IP atual de danieldoalto.ddns.net \r\n       :local ddnsCurrentIP [:resolve $ddnsHost server=1.1.1.1]\r\n       :log info $ddnsCurrentIP\r\n       # Comparar com IP p\\FAblico do PPPoE\r\n       :if ($ddnsIP != $ddnsCurrentIP) do={\r\n         # Atualizar o DNS din\\E2mico No-IP\r\n         :log info \"Atualizando No-IP para $ddnsIP\"\r\n         /tool fetch url=\"http://dynupdate.no-ip.com/nic/update?hostname=$ddnsHost&myip=$ddnsIP\" user=$ddnsUser password=$ddnsPass mode=http dst-path=\"noip.txt\"\r\n         :log info \"DNS No-IP atualizado para $ddnsIP\"\r\n       } else={\r\n         :log info \"O IP de danieldoalto.ddns.net ($ddnsCurrentIP) j\\E1 est\\E1 atualizado.\"\r\n       }\r\n       \r\n       :log warning \"Script de atualiza\\E7\\E3o No-IP finalizado\"\r\n\r\n12   name=\"PingTest\" owner=\"admin\" \r\n     policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon \r\n     dont-require-permissions=no last-started=2025-07-21 19:43:17 \r\n     run-count=16 source= /tool/ ping address=8.8.8.8 count=4 interval=0.5 \r\n\r\n13   name=\"wakelinux\" owner=\"daniel\" \r\n     policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon \r\n     dont-require-permissions=no last-started=2025-09-13 06:03:10 \r\n     run-count=27 source=\r\n       /tool wol mac=D4:5D:64:34:92:37 interface=ether5\r\n       :log/info \"Magic packet enviado e script rodando\"\r\n       :put \"Packet Magic enviado. Esperar 30 segundos e testar conectividade\"\r\n\r\n14   name=\"ping-test\" owner=\"admin\" \r\n     policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon \r\n     dont-require-permissions=no last-started=2025-09-13 06:47:03 \r\n     run-count=41 source=\r\n          :local target \"192.168.10.124\";\r\n           :local sucessos 0;\r\n           :local falhas 0;\r\n           \r\n           :put \"=== Teste de Conectividade ===\";\r\n           :put (\"Destino: \" . $target);\r\n           :put \"\";\r\n           \r\n           :for i from=1 to=3 do={\r\n               # Executa o ping e captura o resultado\r\n               :local resultado [/ping $target count=1];\r\n               \r\n               :if ($resultado > 0) do={\r\n                   :put (\"Ping \" . $i . \": CONECTADO\");\r\n                   :set sucessos ($sucessos + 1);\r\n               } else={\r\n                   :put (\"Ping \" . $i . \": DESCONECTADO\");\r\n                   :set falhas ($falhas + 1);\r\n               }\r\n               \r\n               :delay 1s;\r\n           }\r\n           \r\n           :put \"\";\r\n           :put \"=== Resumo ===\";\r\n           :put (\"Sucessos: \" . $sucessos);\r\n           :put (\"Falhas: \" . $falhas);\r\n           :put (\"Taxa de sucesso: \" . (($sucessos * 100) / 10) . \"%\");\r\n\r\n15   name=\"DesligarComputador\" owner=\"admin\" \r\n     policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon \r\n     dont-require-permissions=no last-started=2025-09-10 12:31:37 \r\n     run-count=15 source=\r\n       # Script MikroTik: shutdown-server\r\n       # Sistema > Scripts > Add\r\n       :local serverIP \"192.168.10.124\"\r\n       :local serverPort \"5001\"\r\n       :local usuario \"operador\"\r\n       :local senha \"op2024desliga\"\r\n       :local baseURL (\"http://\" . $serverIP . \":\" . $serverPort)\r\n       \r\n       :log info \"Iniciando desligamento do servidor $serverIP\"\r\n       :put \"Iniciando desligamento do servidor $serverIP\"\r\n       \r\n       # Verificar status primeiro\r\n       :local statusURL ($baseURL . \"/api/status\")\r\n       :local statusResult [/tool fetch url=$statusURL as-value output=user]\r\n       \r\n       :if (($statusResult->\"status\") = \"finished\") do={\r\n           :log info \"Servidor respondendo, enviando comando de desligamento\"\r\n           :put \"Servidor respondendo, enviando comando de desligamento\"    \r\n           \r\n           # Enviar comando de desligamento\r\n           :local shutdownURL ($baseURL . \"/shutdown?usuario=\" . $usuario . \"&senha=\" . $senha)\r\n           :local result [/tool fetch url=$shutdownURL http-method=post as-value output=user]\r\n           \r\n           :if (($result->\"status\") = \"finished\") do={\r\n               :log info \"Comando de desligamento enviado com sucesso\"\r\n               :put \"Comando de desligamento enviado com sucesso\"\r\n               :log info (\"Resposta: \" . ($result->\"data\"))\r\n               :put \"Desligamento em andamento...\"\r\n               :put (\"Resposta: \" . ($result->\"data\"))\r\n           } else={\r\n               :put \"Falha ao enviar comando de desligamento\"\r\n               :put (\"Erro: \" . ($result->\"status\"))\r\n               :log error \"Falha ao enviar comando de desligamento\"\r\n               :log error (\"Erro: \" . ($result->\"status\"))\r\n           }\r\n       } else={\r\n           :log error \"Servidor n\\E3o est\\E1 respondendo\"\r\n           :put \"Servidor n\\E3o est\\E1 respondendo\"\\t\r\n       }\r\n\r\n16   name=\"HibernateComputer\" owner=\"admin\" \r\n     policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon \r\n     dont-require-permissions=no last-started=2025-09-11 09:39:26 \r\n     run-count=14 source=\r\n       # Script MikroTik: hibernate-server\r\n       # Sistema > Scripts > Add\r\n       :local serverIP \"192.168.10.124\"\r\n       :local serverPort \"5001\"\r\n       :local usuario \"operador\"\r\n       :local senha \"op2024desliga\"\r\n       :local baseURL (\"http://\" . $serverIP . \":\" . $serverPort)\r\n       \r\n       :log info \"Iniciando HIBERNACAO do servidor $serverIP\"\r\n       :put \"Iniciando HIBERNACAO do servidor $serverIP\"\r\n       \r\n       # Verificar status primeiro\r\n       :local statusURL ($baseURL . \"/api/status\")\r\n       :local statusResult [/tool fetch url=$statusURL as-value output=user]\r\n       \r\n       :if (($statusResult->\"status\") = \"finished\") do={\r\n           :log info \"Servidor respondendo, enviando comando de HIBERNACAO\"\r\n           :put \"Servidor respondendo, enviando comando de HIBERNACAO\"    \r\n           \r\n           # Enviar comando de HIBERNACAO\r\n           :local shutdownURL ($baseURL . \"/hibernate?usuario=\" . $usuario . \"&senha=\" . $senha)\r\n           :local result [/tool fetch url=$shutdownURL http-method=post as-value output=user]\r\n           \r\n           :if (($result->\"status\") = \"finished\") do={\r\n               :log info \"Comando de HIBERNACAO enviado com sucesso\"\r\n               :put \"Comando de HIBERNACAO enviado com sucesso\"\r\n               :log info (\"Resposta: \" . ($result->\"data\"))\r\n               :put \"HIBERNACAO em andamento...\"\r\n               :put (\"Resposta: \" . ($result->\"data\"))\r\n           } else={\r\n               :put \"Falha ao enviar comando de HIBERNACAO\"\r\n               :put (\"Erro: \" . ($result->\"status\"))\r\n               :log error \"Falha ao enviar comando de HIBERNACAO\"\r\n               :log error (\"Erro: \" . ($result->\"status\"))\r\n           }\r\n       } else={\r\n           :log error \"Servidor nao est\\E1 respondendo\"\r\n           :put \"Servidor nao est\\E1 respondendo\"\\t\r\n       }\r\n\r\n17   name=\"wakeMyComputer\" owner=\"admin\" \r\n     policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon \r\n     dont-require-permissions=no last-started=2025-09-11 19:40:15 \r\n     run-count=41 source=\r\n       /tool wol mac=D8:BB:C1:92:9D:43 interface=ether2\r\n       :log/info \"Magic packet enviado e script rodando\"\r\n       :put \"Packet Magic enviado. Esperar 30 segundos e testar conectividade\"\r\n\r\n18   name=\"REDEFINE_LOG\" owner=\"daniel\" \r\n     policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon \r\n     dont-require-permissions=no last-started=2025-09-14 13:05:22 run-count=5 \r\n     source=\r\n       # ----- SCRIPT PARA LIMPAR E REDEFINIR O LOG -----\r\n       \r\n       # Coment\\E1rio: A forma mais eficaz de \"limpar\" o log da mem\\F3ria \\E9\r\n       # reduzir drasticamente seu tamanho e depois restaur\\E1-lo.\r\n       # Isso for\\E7a o RouterOS a descartar as entradas antigas.\r\n       \r\n       # Passo 1: Reduz o buffer do log em mem\\F3ria para apenas 1 linha.\r\n       # Isso efetivamente apaga todo o hist\\F3rico, exceto a \\FAltima entrada.\r\n       /system logging action set memory memory-lines=1;\r\n       \r\n       # Adiciona uma pequena pausa para garantir que a a\\E7\\E3o seja processada.\r\n       :delay 1s;\r\n       \r\n       # Passo 2: Define o buffer do log em mem\\F3ria para o tamanho desejado de 1000 linhas.\r\n       /system logging action set memory memory-lines=1000;\r\n       \r\n       # Passo 3 (Opcional): Adiciona uma mensagem ao novo log para confirmar\r\n       # que o script foi executado com sucesso.\r\n       /log info message=\"Log foi limpo e redefinido para 1000 linhas.\";\r\n\r\n19   name=\"PCDan_Health\" owner=\"daniel\" \r\n     policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon \r\n     dont-require-permissions=no last-started=2025-09-14 06:32:59 run-count=8 \r\n     \r\n     source=\r\n       # Script MikroTik - Verifica\\E7\\E3o de Health do PowerControl Service\r\n       # Configurar no MikroTik: System > Scripts\r\n       # Nome: pc-health-check\r\n       \r\n       :local apiUrl \"http://192.168.10.117:8080/api/v1/health\"\r\n       :local pcIP \"192.168.10.117\"\r\n       :local logPrefix \"PowerControl-Health\"\r\n       \r\n       :log info \"$logPrefix: Iniciando verifica\\E7\\E3o de sa\\FAde do PC $pcIP...\"\r\n       \r\n       # Primeiro verifica conectividade b\\E1sica (ping)\r\n       :local pingResult [/ping $pcIP count=3]\r\n       :if ($pingResult = 0) do={\r\n           :log error \"$logPrefix: PC $pcIP n\\E3o responde ao ping - Offline\"\r\n           :put \"? PC $pcIP est\\E1 OFFLINE (sem resposta ao ping)\"\r\n           :return false\r\n       }\r\n       \r\n       :log info \"$logPrefix: PC $pcIP responde ao ping ($pingResult/3 pacotes)\"\r\n       :put \"? Conectividade: PC $pcIP online ($pingResult/3 pings)\"\r\n       \r\n       # Verifica se a API est\\E1 respondendo\r\n       :log info \"$logPrefix: Testando endpoint de health...\"\r\n       \r\n       :local fetchResult\r\n       :local httpStatus\r\n       :local responseData\r\n       \r\n       # Executa requisi\\E7\\E3o HTTP GET para health check\r\n       :do {\r\n           /tool fetch url=$apiUrl http-method=get dst-path=\"health_response.txt\"\r\n           :set fetchResult $\"fetch-status\"\r\n           :set httpStatus $\"http-status\"\r\n           \r\n           # L\\EA resposta se dispon\\EDvel\r\n           :if ([:len [/file find name=\"health_response.txt\"]] > 0) do={\r\n               :set responseData [/file get \"health_response.txt\" contents]\r\n               /file remove \"health_response.txt\"\r\n           }\r\n       } on-error={\r\n           :log error \"$logPrefix: Erro na requisi\\E7\\E3o HTTP para $apiUrl\"\r\n           :put \"? API Health Check: Falha na conex\\E3o HTTP\"\r\n           :return false\r\n       }\r\n       \r\n       # Analisa resultado da requisi\\E7\\E3o\r\n       :if ($fetchResult = \"finished\") do={\r\n           :if ($httpStatus = 200) do={\r\n               :log info \"$logPrefix: API respondeu com sucesso (HTTP 200)\"\r\n               :put \"? API Status: PowerControl Service est\\E1 funcionando\"\r\n               \r\n               # Tenta extrair informa\\E7\\F5es da resposta JSON\r\n               :if ([:len $responseData] > 0) do={\r\n                   :if ([:find $responseData \"ok\"] >= 0) do={\r\n                       :put \"? Service Status: OK\"\r\n                   }\r\n                   :if ([:find $responseData \"powercontrol_service\"] >= 0) do={\r\n                       :put \"? Service Name: PowerControl Service identificado\"\r\n                   }\r\n                   :if ([:find $responseData \"version\"] >= 0) do={\r\n                       :local versionStart [:find $responseData \"version\"]\r\n                       :local versionPart [:pick $responseData $versionStart ($versionStart + 20)]\r\n                       :put \"?? $versionPart\"\r\n                   }\r\n               }\r\n               \r\n               :log info \"$logPrefix: Verifica\\E7\\E3o completa - Servi\\E7o saud\\E1vel\"\r\n               :return true\r\n               \r\n           } else={\r\n               :log warning \"$logPrefix: API respondeu com HTTP $httpStatus\"\r\n               :put \"?? API Status: HTTP $httpStatus (servi\\E7o pode estar com problemas)\"\r\n               :return false\r\n           }\r\n       } else={\r\n           :log error \"$logPrefix: Falha na requisi\\E7\\E3o HTTP (status: $fetchResult)\"\r\n           :put \"? API Health Check: Requisi\\E7\\E3o falhou ($fetchResult)\"\r\n           :return false\r\n       }\r\n       \r\n       # Para executar este script via terminal:\r\n       # /system script run pc-health-check\r\n       \r\n       # Para agendar verifica\\E7\\E3o peri\\F3dica (a cada 5 minutos):\r\n       # /system scheduler add name=\"health-check-5min\" start-time=startup interval=5m on-event=\"/system script run pc-health-check\"\r\n       \r\n       # Para verifica\\E7\\E3o r\\E1pida antes de executar comandos de power:\r\n       # :if ([/system script run pc-health-check] = true) do={ /system script run pc-shutdown }\r\n       \r\n       # Para criar alerta quando servi\\E7o ficar indispon\\EDvel:\r\n       # Combine com script de notifica\\E7\\E3o (email, telegram, etc.)\r\n\r\n20   name=\"PCDan_Hibernate\" owner=\"admin\" \r\n     policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon \r\n     dont-require-permissions=no last-started=2025-09-13 10:09:13 run-count=8 \r\n     source=\r\n       # Script MikroTik - Hiberna\\E7\\E3o do PC via PowerControl Service\r\n       # Configurar no MikroTik: System > Scripts\r\n       # Nome: pc-hibernate\r\n       \r\n       :local apiUrl \"http://192.168.10.106:8080/api/v1/power/hibernate\"\r\n       :local authToken \"1q2w3e4r5t6y\"\r\n       :local headers \"Authorization: Bearer $authToken,Content-Type: application/json\"\r\n       \r\n       :log info \"Iniciando hiberna\\E7\\E3o do PC 192.168.10.106...\"\r\n       \r\n       # Executa requisi\\E7\\E3o HTTP POST para hiberna\\E7\\E3o\r\n       /tool fetch url=$apiUrl http-method=post http-header-field=$headers\r\n       \r\n       :if ($\"fetch-status\" = \"finished\") do={\r\n           :log info \"Comando de hiberna\\E7\\E3o enviado com sucesso para 192.168.10.106\"\r\n           :put \"PC 192.168.10.106 - Comando de hiberna\\E7\\E3o executado\"\r\n       } else={\r\n           :log error \"Falha ao enviar comando de hiberna\\E7\\E3o para 192.168.10.106\"\r\n           :put \"Erro: N\\E3o foi poss\\EDvel conectar ao PowerControl Service\"\r\n       }\r\n       \r\n       # Para executar este script via terminal:\r\n       # /system script run pc-hibernate\r\n       \r\n       # Para agendar execu\\E7\\E3o (exemplo: ap\\F3s 2 horas de inatividade)\r\n       # /system scheduler add name=\"hibernate-inatividade\" start-time=startup interval=2h on-event=\"/system script run pc-hibernate\"\r\n       \r\n       # Para criar bot\\E3o no Winbox (opcional):\r\n       # Adicione este script em System > Scripts e execute via interface gr\\E1fica\r\n\r\n21   name=\"PCDan_Suspend\" owner=\"admin\" \r\n     policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon \r\n     dont-require-permissions=no run-count=0 \r\n     source=\r\n       # Script MikroTik - Suspens\\E3o do PC via PowerControl Service\r\n       # Configurar no MikroTik: System > Scripts\r\n       # Nome: pc-suspend\r\n       \r\n       :local apiUrl \"http://192.168.10.106:8080/api/v1/power/suspend\"\r\n       :local authToken \"your-secret-token-here\"\r\n       :local headers \"Authorization: Bearer $authToken,Content-Type: application/json\"\r\n       \r\n       :log info \"Iniciando suspens\\E3o do PC 192.168.10.106...\"\r\n       \r\n       # Executa requisi\\E7\\E3o HTTP POST para suspens\\E3o\r\n       /tool fetch url=$apiUrl http-method=post http-header-field=$headers\r\n       \r\n       :if ($\"fetch-status\" = \"finished\") do={\r\n           :log info \"Comando de suspens\\E3o enviado com sucesso para 192.168.10.106\"\r\n           :put \"PC 192.168.10.106 - Comando de suspens\\E3o executado\"\r\n       } else={\r\n           :log error \"Falha ao enviar comando de suspens\\E3o para 192.168.10.106\"\r\n           :put \"Erro: N\\E3o foi poss\\EDvel conectar ao PowerControl Service\"\r\n       }\r\n       \r\n       # Para executar este script via terminal:\r\n       # /system script run pc-suspend\r\n       \r\n       # Para agendar execu\\E7\\E3o (exemplo: todo dia \\E0s 22:30)\r\n       # /system scheduler add name=\"suspend-noturno\" start-time=22:30:00 interval=1d on-event=\"/system script run pc-suspend\"\r\n       \r\n       # Para executar via hotspot (quando usu\\E1rio se desconecta):\r\n       # /ip hotspot user profile set [find name=\"default\"] on-logout=\"/system script run pc-suspend\"\r\n       \r\n       # Para monitoramento de tr\\E1fego (suspender se baixo tr\\E1fego por 30min):\r\n       # Criar script adicional que monitora interface e executa este script quando necess\\E1rio\r\n\r\n22   name=\"PCDan_ShutDown\" owner=\"admin\" \r\n     policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon \r\n     dont-require-permissions=no last-started=2025-09-12 20:44:25 run-count=2 \r\n     source=\r\n       # Script MikroTik - Shutdown do PC via PowerControl Service\r\n       # Configurar no MikroTik: System > Scripts\r\n       # Nome: pc-shutdown\r\n       \r\n       :local apiUrl \"http://192.168.10.106:8080/api/v1/power/shutdown\"\r\n       :local authToken \"your-secret-token-here\"\r\n       :local headers \"Authorization: Bearer $authToken,Content-Type: application/json\"\r\n       \r\n       :log info \"Iniciando shutdown do PC 192.168.10.106...\"\r\n       \r\n       # Executa requisi\\E7\\E3o HTTP POST para shutdown\r\n       /tool fetch url=$apiUrl http-method=post http-header-field=$headers\r\n       \r\n       :if ($\"fetch-status\" = \"finished\") do={\r\n           :log info \"Comando de shutdown enviado com sucesso para 192.168.10.106\"\r\n           :put \"PC 192.168.10.106 - Comando de shutdown executado\"\r\n       } else={\r\n           :log error \"Falha ao enviar comando de shutdown para 192.168.10.106\"\r\n           :put \"Erro: N\\E3o foi poss\\EDvel conectar ao PowerControl Service\"\r\n       }\r\n       \r\n       # Para executar este script via terminal:\r\n       # /system script run pc-shutdown\r\n       \r\n       # Para agendar execu\\E7\\E3o (exemplo: todo dia \\E0s 23:00):\r\n       # /system scheduler add name=\"shutdown-diario\" start-time=23:00:00 interval=1d on-event=\"/system script run pc-shutdown\"\r\n\r\n23   name=\"PCDan_Stop\" owner=\"admin\" \r\n     policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon \r\n     dont-require-permissions=no run-count=0 \r\n     source=\r\n       # Script MikroTik - Parar PowerControl Service\r\n       # Configurar no MikroTik: System > Scripts\r\n       # Nome: pc-service-stop\r\n       \r\n       :local apiUrl \"http://192.168.10.106:8080/api/v1/service/stop\"\r\n       :local authToken \"SEU_TOKEN_AQUI\"\r\n       :local pcIP \"192.168.10.106\"\r\n       :local logPrefix \"PowerControl-Stop\"\r\n       \r\n       :log info \"$logPrefix: Iniciando comando para parar o servi\\E7o...\"\r\n       \r\n       # Verifica conectividade b\\E1sica primeiro\r\n       :local pingResult [/ping $pcIP count=2]\r\n       :if ($pingResult = 0) do={\r\n           :log error \"$logPrefix: PC $pcIP n\\E3o responde ao ping - Offline\"\r\n           :put \"? PC $pcIP est\\E1 OFFLINE (sem resposta ao ping)\"\r\n           :return false\r\n       }\r\n       \r\n       :log info \"$logPrefix: PC $pcIP online, enviando comando de parada...\"\r\n       :put \"?? Enviando comando para parar o PowerControl Service...\"\r\n       \r\n       # Prepara cabe\\E7alhos de autentica\\E7\\E3o\r\n       :local authHeader \"Authorization: Bearer $authToken\"\r\n       :local contentType \"Content-Type: application/json\"\r\n       \r\n       :local fetchResult\r\n       :local httpStatus\r\n       :local responseData\r\n       \r\n       # Executa requisi\\E7\\E3o HTTP POST\r\n       :do {\r\n           /tool fetch url=$apiUrl http-method=post http-header-field=\"$authHeader,$contentType\" dst-path=\"stop_response.txt\"\r\n           :set fetchResult $\"fetch-status\"\r\n           :set httpStatus $\"http-status\"\r\n           \r\n           # L\\EA resposta se dispon\\EDvel\r\n           :if ([:len [/file find name=\"stop_response.txt\"]] > 0) do={\r\n               :set responseData [/file get \"stop_response.txt\" contents]\r\n               /file remove \"stop_response.txt\"\r\n           }\r\n       } on-error={\r\n           :log error \"$logPrefix: Erro na requisi\\E7\\E3o HTTP para $apiUrl\"\r\n           :put \"? Falha na comunica\\E7\\E3o com o servi\\E7o\"\r\n           :return false\r\n       }\r\n       \r\n       # Analisa resultado da requisi\\E7\\E3o\r\n       :if ($fetchResult = \"finished\") do={\r\n           :if ($httpStatus = 200) do={\r\n               :log info \"$logPrefix: Comando de parada enviado com sucesso (HTTP 200)\"\r\n               :put \"? PowerControl Service: Comando de parada executado\"\r\n               \r\n               # Analisa resposta JSON se dispon\\EDvel\r\n               :if ([:len $responseData] > 0) do={\r\n                   :if ([:find $responseData \"success\"] >= 0) do={\r\n                       :put \"? Status: Servi\\E7o ser\\E1 parado\"\r\n                   }\r\n                   :if ([:find $responseData \"message\"] >= 0) do={\r\n                       :local msgStart [:find $responseData \"message\"]\r\n                       :local msgPart [:pick $responseData $msgStart ($msgStart + 50)]\r\n                       :put \"?? Resposta: $msgPart\"\r\n                   }\r\n               }\r\n               \r\n               :log info \"$logPrefix: Servi\\E7o PowerControl ser\\E1 parado\"\r\n               :put \"?? Nota: O servi\\E7o ser\\E1 parado e n\\E3o responder\\E1 a novos comandos\"\r\n               :return true\r\n               \r\n           } else={\r\n               :if ($httpStatus = 401) do={\r\n                   :log error \"$logPrefix: Erro de autentica\\E7\\E3o (HTTP 401) - Token inv\\E1lido\"\r\n                   :put \"? Erro de Autentica\\E7\\E3o: Verifique o Bearer Token\"\r\n               } else={\r\n                   :log warning \"$logPrefix: Servi\\E7o respondeu com HTTP $httpStatus\"\r\n                   :put \"?? Resposta inesperada: HTTP $httpStatus\"\r\n               }\r\n               :return false\r\n           }\r\n       } else={\r\n           :log error \"$logPrefix: Falha na requisi\\E7\\E3o HTTP (status: $fetchResult)\"\r\n           :put \"? Falha na requisi\\E7\\E3o: $fetchResult\"\r\n           :return false\r\n       }\r\n       \r\n       # Para executar este script via terminal:\r\n       # /system script run pc-service-stop\r\n       \r\n       # Para usar em emerg\\EAncias ou manuten\\E7\\E3o:\r\n       # :if ([/system script run pc-health-check] = false) do={ /system script run pc-service-stop }\r\n       \r\n       # ATEN\\C7\\C3O: Ap\\F3s parar o servi\\E7o, ser\\E1 necess\\E1rio reinici\\E1-lo manualmente no PC\r\n       # ou usar o script de instala\\E7\\E3o para recriar o servi\\E7o\r\n       \r\n       # Para verificar se o servi\\E7o parou:\r\n       # Aguarde alguns segundos e execute: /system script run pc-health-check\r\n       # Se retornar erro de conex\\E3o, o servi\\E7o foi parado com sucesso\r\n\r\n24   name=\"pc_hibernate\" owner=\"daniel\" \r\n     policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon \r\n     dont-require-permissions=no last-started=2025-09-14 06:34:11 \r\n     run-count=18 \r\n     source=\r\n       # Script MikroTik - Hiberna\\E7\\E3o do PC via PowerControl Service\r\n       # Configurar no MikroTik: System > Scripts\r\n       # Nome: pc-hibernate\r\n       \r\n       # ========================================\r\n       # CONFIGURA\\C7\\D5ES CENTRALIZADAS\r\n       # ========================================\r\n       :local pcIP \"192.168.10.117\"\r\n       :local servicePort \"8080\"\r\n       :local authToken \"1q2w3e4r5t6y\"\r\n       :local baseUrl \"http://$pcIP:$servicePort/api/v1\"\r\n       :local apiUrl \"$baseUrl/power/hibernate\"\r\n       :local logPrefix \"PowerControl-Hibernate\"\r\n       :local outputFile \"hibernate_result.txt\"\r\n       :local responseFile \"hibernate_response.txt\"\r\n       \r\n       # ========================================\r\n       # EXECU\\C7\\C3O PRINCIPAL\r\n       # ========================================\r\n       \r\n       # Limpar arquivos anteriores\r\n       :if ([:len [/file find name=$outputFile]] > 0) do={ /file remove $outputFile }\r\n       :if ([:len [/file find name=$responseFile]] > 0) do={ /file remove $responseFile }\r\n       \r\n       # Inicializar arquivo de sa\\EDda\r\n       /file print file=$outputFile where name=\"dummy-never-match\"\r\n       /file set $outputFile contents=\"\"\r\n       \r\n       # Log de in\\EDcio\r\n       :local timestamp [/system clock get date]\r\n       :local time [/system clock get time]\r\n       :local startMessage \"[$timestamp $time] $logPrefix: Iniciando hiberna\\E7\\E3o do PC $pcIP...\"\r\n       :log info $startMessage\r\n       :put $startMessage\r\n       /file set $outputFile contents=\"$startMessage\\n\"\r\n       \r\n       # Verificar conectividade b\\E1sica primeiro\r\n       :local pingResult [/ping $pcIP count=2]\r\n       :if ($pingResult = 0) do={\r\n           :local timestamp [/system clock get date]\r\n           :local time [/system clock get time]\r\n           :local errorMsg \"[$timestamp $time] $logPrefix: PC $pcIP n\\E3o responde ao ping - Offline\"\r\n           :log error $errorMsg\r\n           :put \"ERRO: PC $pcIP esta OFFLINE (sem resposta ao ping)\"\r\n           :put \"Log salvo em: $outputFile\"\r\n           :local fileContent [/file get $outputFile contents]\r\n           /file set $outputFile contents=\"$fileContent$errorMsg\\n\"\r\n           :return false\r\n       }\r\n       \r\n       :local timestamp [/system clock get date]\r\n       :local time [/system clock get time]\r\n       :local onlineMsg \"[$timestamp $time] $logPrefix: PC $pcIP online, enviando comando de hiberna\\E7\\E3o...\"\r\n       :log info $onlineMsg\r\n       :put \"Enviando comando de hibernacao para PC $pcIP...\"\r\n       :local fileContent [/file get $outputFile contents]\r\n       /file set $outputFile contents=\"$fileContent$onlineMsg\\n\"\r\n       \r\n       # Preparar cabe\\E7alhos de autentica\\E7\\E3o\r\n       :local authHeader \"Authorization: Bearer $authToken\"\r\n       :local contentType \"Content-Type: application/json\"\r\n       :local headers \"$authHeader,$contentType\"\r\n       \r\n       :local fetchResult\r\n       :local httpStatus\r\n       :local responseData\r\n       \r\n       # Executar requisi\\E7\\E3o HTTP POST\r\n       :do {\r\n           /tool fetch url=$apiUrl http-method=post http-header-field=$headers dst-path=$responseFile\r\n           :set fetchResult \"finished\"\r\n           \r\n           # Ler resposta se dispon\\EDvel\r\n           :if ([:len [/file find name=$responseFile]] > 0) do={\r\n               :set responseData [/file get $responseFile contents]\r\n               /file remove $responseFile\r\n               :set httpStatus 200\r\n           } else={\r\n               :set httpStatus 500\r\n           }\r\n       } on-error={\r\n           :local timestamp [/system clock get date]\r\n           :local time [/system clock get time]\r\n           :local errorMsg \"[$timestamp $time] $logPrefix: Erro na requisi\\E7\\E3o HTTP para $apiUrl\"\r\n           :log error $errorMsg\r\n           :put \"ERRO: Falha na comunicacao com o PowerControl Service\"\r\n           :put \"Log salvo em: $outputFile\"\r\n           :local fileContent [/file get $outputFile contents]\r\n           /file set $outputFile contents=\"$fileContent$errorMsg\\n\"\r\n           :return false\r\n       }\r\n       \r\n       # Analisar resultado da requisi\\E7\\E3o\r\n       :if ($fetchResult = \"finished\") do={\r\n           :if ($httpStatus = 200) do={\r\n               :local timestamp [/system clock get date]\r\n               :local time [/system clock get time]\r\n               :local successMsg \"[$timestamp $time] $logPrefix: Comando de hibernacao enviado com sucesso (HTTP 200)\"\r\n               :log info $successMsg\r\n               :put \"OK: PC $pcIP - Comando de hibernacao executado com sucesso\"\r\n               :local fileContent [/file get $outputFile contents]\r\n               /file set $outputFile contents=\"$fileContent$successMsg\\n\"\r\n               \r\n               # Analisar resposta JSON se dispon\\EDvel\r\n               :if ([:len $responseData] > 0) do={\r\n                   :local timestamp [/system clock get date]\r\n                   :local time [/system clock get time]\r\n                   :local apiMsg \"[$timestamp $time] $logPrefix: Resposta da API: $responseData\"\r\n                   :log info $apiMsg\r\n                   :local fileContent [/file get $outputFile contents]\r\n                   /file set $outputFile contents=\"$fileContent$apiMsg\\n\"\r\n                   :if ([:find $responseData \"success\"] >= 0) do={\r\n                       :put \"OK: Status: Hibernacao sera executada\"\r\n                   }\r\n                   :if ([:find $responseData \"message\"] >= 0) do={\r\n                       :local msgStart [:find $responseData \"message\"]\r\n                       :local msgPart [:pick $responseData $msgStart ($msgStart + 50)]\r\n                       :put \"Info: Resposta: $msgPart\"\r\n                   }\r\n               }\r\n               \r\n               :local timestamp [/system clock get date]\r\n               :local time [/system clock get time]\r\n               :local hibernateMsg \"[$timestamp $time] $logPrefix: PC entrara em hibernacao em instantes\"\r\n               :log info $hibernateMsg\r\n               :put \"Nota: PC entrara em hibernacao (estado salvo, consumo minimo)\"\r\n               :put \"Para despertar: pressionar botao power ou usar Wake-on-LAN\"\r\n               :put \"Log salvo em: $outputFile\"\r\n               :local fileContent [/file get $outputFile contents]\r\n               /file set $outputFile contents=\"$fileContent$hibernateMsg\\n\"\r\n               :return true\r\n               \r\n           } else={\r\n               :if ($httpStatus = 401) do={\r\n                   :local timestamp [/system clock get date]\r\n                   :local time [/system clock get time]\r\n                   :local authMsg \"[$timestamp $time] $logPrefix: Erro de autenticacao (HTTP 401) - Token invalido\"\r\n                   :log error $authMsg\r\n                   :put \"ERRO: Erro de Autenticacao: Verifique o Bearer Token\"\r\n                   :local fileContent [/file get $outputFile contents]\r\n                   /file set $outputFile contents=\"$fileContent$authMsg\\n\"\r\n               } else={\r\n                   :local timestamp [/system clock get date]\r\n                   :local time [/system clock get time]\r\n                   :local warnMsg \"[$timestamp $time] $logPrefix: Servico respondeu com HTTP $httpStatus\"\r\n                   :log warning $warnMsg\r\n                   :put \"Aviso: Resposta inesperada: HTTP $httpStatus\"\r\n                   :local fileContent [/file get $outputFile contents]\r\n                   /file set $outputFile contents=\"$fileContent$warnMsg\\n\"\r\n               }\r\n               :put \"Log salvo em: $outputFile\"\r\n               :return false\r\n           }\r\n       } else={\r\n           :local timestamp [/system clock get date]\r\n           :local time [/system clock get time]\r\n           :local failMsg \"[$timestamp $time] $logPrefix: Falha na requisicao HTTP (status: $fetchResult)\"\r\n           :log error $failMsg\r\n           :put \"ERRO: Falha na requisicao: $fetchResult\"\r\n           :put \"Log salvo em: $outputFile\"\r\n           :local fileContent [/file get $outputFile contents]\r\n           /file set $outputFile contents=\"$fileContent$failMsg\\n\"\r\n           :return false\r\n       }\r\n       \r\n       # ========================================\r\n       # INSTRU\\C7\\D5ES DE USO\r\n       # ========================================\r\n       \r\n       # Para executar este script via terminal:\r\n       # /system script run pc-hibernate\r\n       \r\n       # Para ver o arquivo de resultado:\r\n       # /file get hibernate_result.txt contents\r\n       \r\n       # Para agendar execu\\E7\\E3o (exemplo: ap\\F3s 2 horas de inatividade)\r\n       # /system scheduler add name=\"hibernate-inatividade\" start-time=startup interval=2h on-event=\"/system script run pc-hibernate\"\r\n       \r\n       # Para executar com verifica\\E7\\E3o pr\\E9via de sa\\FAde:\r\n       # :if ([/system script run pc-health-check] = true) do={ /system script run pc-hibernate }\r\n       \r\n       # Para criar bot\\E3o no Winbox (opcional):\r\n       # Adicione este script em System > Scripts e execute via interface gr\\E1fica\r\n       \r\n       # ========================================\r\n       # ARQUIVOS GERADOS\r\n       # ========================================\r\n       # hibernate_result.txt - Log completo da opera\\E7\\E3o\r\n       # hibernate_response.txt - Resposta tempor\\E1ria da API (removido automaticamente)\r\n\r\n25   name=\"pc_suspend\" owner=\"daniel\" \r\n     policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon \r\n     dont-require-permissions=no last-started=2025-09-13 14:29:44 run-count=7 \r\n     source=\r\n       # Script MikroTik - suspensao do PC via PowerControl Service\r\n       # Configurar no MikroTik: System > Scripts\r\n       # Nome: pc-suspend\r\n       \r\n       # ========================================\r\n       # CONFIGURA\\C7\\D5ES CENTRALIZADAS\r\n       # ========================================\r\n       :local pcIP \"192.168.10.117\"\r\n       :local servicePort \"8080\"\r\n       :local authToken \"1q2w3e4r5t6y\"\r\n       :local baseUrl \"http://$pcIP:$servicePort/api/v1\"\r\n       :local apiUrl \"$baseUrl/power/suspend\"\r\n       :local logPrefix \"PowerControl-Suspend\"\r\n       :local outputFile \"suspend_result.txt\"\r\n       :local responseFile \"suspend_response.txt\"\r\n       \r\n       # ========================================\r\n       # EXECU\\C7\\C3O PRINCIPAL\r\n       # ========================================\r\n       \r\n       # Limpar arquivos anteriores\r\n       :if ([:len [/file find name=$outputFile]] > 0) do={ /file remove $outputFile }\r\n       :if ([:len [/file find name=$responseFile]] > 0) do={ /file remove $responseFile }\r\n       \r\n       # Inicializar arquivo de sa\\EDda\r\n       /file print file=$outputFile where name=\"dummy-never-match\"\r\n       /file set $outputFile contents=\"\"\r\n       \r\n       # Log de in\\EDcio\r\n       :local timestamp [/system clock get date]\r\n       :local time [/system clock get time]\r\n       :local startMessage \"[$timestamp $time] $logPrefix: Iniciando suspensao do PC $pcIP...\"\r\n       :log info $startMessage\r\n       :put $startMessage\r\n       /file set $outputFile contents=\"$startMessage\\n\"\r\n       \r\n       # Verificar conectividade b\\E1sica primeiro\r\n       :local pingResult [/ping $pcIP count=2]\r\n       :if ($pingResult = 0) do={\r\n           :local timestamp [/system clock get date]\r\n           :local time [/system clock get time]\r\n           :local errorMsg \"[$timestamp $time] $logPrefix: PC $pcIP n\\E3o responde ao ping - Offline\"\r\n           :log error $errorMsg\r\n           :put \"ERRO: PC $pcIP esta OFFLINE (sem resposta ao ping)\"\r\n           :put \"Log salvo em: $outputFile\"\r\n           :local fileContent [/file get $outputFile contents]\r\n           /file set $outputFile contents=\"$fileContent$errorMsg\\n\"\r\n           :return false\r\n       }\r\n       \r\n       :local timestamp [/system clock get date]\r\n       :local time [/system clock get time]\r\n       :local onlineMsg \"[$timestamp $time] $logPrefix: PC $pcIP online, enviando comando de suspensao...\"\r\n       :log info $onlineMsg\r\n       :put \"Enviando comando de suspensao para PC $pcIP...\"\r\n       :local fileContent [/file get $outputFile contents]\r\n       /file set $outputFile contents=\"$fileContent$onlineMsg\\n\"\r\n       \r\n       # Preparar cabe\\E7alhos de autentica\\E7\\E3o\r\n       :local authHeader \"Authorization: Bearer $authToken\"\r\n       :local contentType \"Content-Type: application/json\"\r\n       :local headers \"$authHeader,$contentType\"\r\n       \r\n       :local fetchResult\r\n       :local httpStatus\r\n       :local responseData\r\n       \r\n       # Executar requisi\\E7\\E3o HTTP POST\r\n       :do {\r\n           /tool fetch url=$apiUrl http-method=post http-header-field=$headers dst-path=$responseFile\r\n           :set fetchResult \"finished\"\r\n           \r\n           # Ler resposta se dispon\\EDvel\r\n           :if ([:len [/file find name=$responseFile]] > 0) do={\r\n               :set responseData [/file get $responseFile contents]\r\n               /file remove $responseFile\r\n               :set httpStatus 200\r\n           } else={\r\n               :set httpStatus 500\r\n           }\r\n       } on-error={\r\n           :local timestamp [/system clock get date]\r\n           :local time [/system clock get time]\r\n           :local errorMsg \"[$timestamp $time] $logPrefix: Erro na requisi\\E7\\E3o HTTP para $apiUrl\"\r\n           :log error $errorMsg\r\n           :put \"ERRO: Falha na comunicacao com o PowerControl Service\"\r\n           :put \"Log salvo em: $outputFile\"\r\n           :local fileContent [/file get $outputFile contents]\r\n           /file set $outputFile contents=\"$fileContent$errorMsg\\n\"\r\n           :return false\r\n       }\r\n       \r\n       # Analisar resultado da requisi\\E7\\E3o\r\n       :if ($fetchResult = \"finished\") do={\r\n           :if ($httpStatus = 200) do={\r\n               :local timestamp [/system clock get date]\r\n               :local time [/system clock get time]\r\n               :local successMsg \"[$timestamp $time] $logPrefix: Comando de suspensao enviado com sucesso (HTTP 200)\"\r\n               :log info $successMsg\r\n               :put \"OK: PC $pcIP - Comando de suspensao executado com sucesso\"\r\n               :local fileContent [/file get $outputFile contents]\r\n               /file set $outputFile contents=\"$fileContent$successMsg\\n\"\r\n               \r\n               # Analisar resposta JSON se dispon\\EDvel\r\n               :if ([:len $responseData] > 0) do={\r\n                   :local timestamp [/system clock get date]\r\n                   :local time [/system clock get time]\r\n                   :local apiMsg \"[$timestamp $time] $logPrefix: Resposta da API: $responseData\"\r\n                   :log info $apiMsg\r\n                   :local fileContent [/file get $outputFile contents]\r\n                   /file set $outputFile contents=\"$fileContent$apiMsg\\n\"\r\n                   :if ([:find $responseData \"success\"] >= 0) do={\r\n                       :put \"OK: Status: suspensao sera executada\"\r\n                   }\r\n                   :if ([:find $responseData \"message\"] >= 0) do={\r\n                       :local msgStart [:find $responseData \"message\"]\r\n                       :local msgPart [:pick $responseData $msgStart ($msgStart + 50)]\r\n                       :put \"Info: Resposta: $msgPart\"\r\n                   }\r\n               }\r\n               \r\n               :local timestamp [/system clock get date]\r\n               :local time [/system clock get time]\r\n               :local suspensaoMsg \"[$timestamp $time] $logPrefix: PC entrara em suspensao em instantes\"\r\n               :log info $suspensaoMsg\r\n               :put \"Nota: PC entrara em suspensao (estado salvo, consumo minimo)\"\r\n               :put \"Para despertar: pressionar botao power ou usar Wake-on-LAN\"\r\n               :put \"Log salvo em: $outputFile\"\r\n               :local fileContent [/file get $outputFile contents]\r\n               /file set $outputFile contents=\"$fileContent$suspensaoMsg\\n\"\r\n               :return true\r\n               \r\n           } else={\r\n               :if ($httpStatus = 401) do={\r\n                   :local timestamp [/system clock get date]\r\n                   :local time [/system clock get time]\r\n                   :local authMsg \"[$timestamp $time] $logPrefix: Erro de autenticacao (HTTP 401) - Token invalido\"\r\n                   :log error $authMsg\r\n                   :put \"ERRO: Erro de Autenticacao: Verifique o Bearer Token\"\r\n                   :local fileContent [/file get $outputFile contents]\r\n                   /file set $outputFile contents=\"$fileContent$authMsg\\n\"\r\n               } else={\r\n                   :local timestamp [/system clock get date]\r\n                   :local time [/system clock get time]\r\n                   :local warnMsg \"[$timestamp $time] $logPrefix: Servico respondeu com HTTP $httpStatus\"\r\n                   :log warning $warnMsg\r\n                   :put \"Aviso: Resposta inesperada: HTTP $httpStatus\"\r\n                   :local fileContent [/file get $outputFile contents]\r\n                   /file set $outputFile contents=\"$fileContent$warnMsg\\n\"\r\n               }\r\n               :put \"Log salvo em: $outputFile\"\r\n               :return false\r\n           }\r\n       } else={\r\n           :local timestamp [/system clock get date]\r\n           :local time [/system clock get time]\r\n           :local failMsg \"[$timestamp $time] $logPrefix: Falha na requisicao HTTP (status: $fetchResult)\"\r\n           :log error $failMsg\r\n           :put \"ERRO: Falha na requisicao: $fetchResult\"\r\n           :put \"Log salvo em: $outputFile\"\r\n           :local fileContent [/file get $outputFile contents]\r\n           /file set $outputFile contents=\"$fileContent$failMsg\\n\"\r\n           :return false\r\n       }\r\n       \r\n\r\n26   name=\"pc_shutdown\" owner=\"daniel\" \r\n     policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon \r\n     dont-require-permissions=no last-started=2025-09-13 14:17:50 run-count=3 \r\n     source=\r\n       # Script MikroTik - shutdown do PC via PowerControl Service\r\n       # Configurar no MikroTik: System > Scripts\r\n       # Nome: pc-hibernate\r\n       \r\n       # ========================================\r\n       # CONFIGURA\\C7\\D5ES CENTRALIZADAS\r\n       # ========================================\r\n       :local pcIP \"192.168.10.117\"\r\n       :local servicePort \"8080\"\r\n       :local authToken \"1q2w3e4r5t6y\"\r\n       :local baseUrl \"http://$pcIP:$servicePort/api/v1\"\r\n       :local apiUrl \"$baseUrl/power/shutdown\"\r\n       :local logPrefix \"PowerControl-shutdown\"\r\n       :local outputFile \"shutdown_result.txt\"\r\n       :local responseFile \"shutdown_response.txt\"\r\n       \r\n       # ========================================\r\n       # EXECU\\C7\\C3O PRINCIPAL\r\n       # ========================================\r\n       \r\n       # Limpar arquivos anteriores\r\n       :if ([:len [/file find name=$outputFile]] > 0) do={ /file remove $outputFile }\r\n       :if ([:len [/file find name=$responseFile]] > 0) do={ /file remove $responseFile }\r\n       \r\n       # Inicializar arquivo de sa\\EDda\r\n       /file print file=$outputFile where name=\"dummy-never-match\"\r\n       /file set $outputFile contents=\"\"\r\n       \r\n       # Log de in\\EDcio\r\n       :local timestamp [/system clock get date]\r\n       :local time [/system clock get time]\r\n       :local startMessage \"[$timestamp $time] $logPrefix: Iniciando shutdown do PC $pcIP...\"\r\n       :log info $startMessage\r\n       :put $startMessage\r\n       /file set $outputFile contents=\"$startMessage\\n\"\r\n       \r\n       # Verificar conectividade b\\E1sica primeiro\r\n       :local pingResult [/ping $pcIP count=2]\r\n       :if ($pingResult = 0) do={\r\n           :local timestamp [/system clock get date]\r\n           :local time [/system clock get time]\r\n           :local errorMsg \"[$timestamp $time] $logPrefix: PC $pcIP n\\E3o responde ao ping - Offline\"\r\n           :log error $errorMsg\r\n           :put \"ERRO: PC $pcIP esta OFFLINE (sem resposta ao ping)\"\r\n           :put \"Log salvo em: $outputFile\"\r\n           :local fileContent [/file get $outputFile contents]\r\n           /file set $outputFile contents=\"$fileContent$errorMsg\\n\"\r\n           :return false\r\n       }\r\n       \r\n       :local timestamp [/system clock get date]\r\n       :local time [/system clock get time]\r\n       :local onlineMsg \"[$timestamp $time] $logPrefix: PC $pcIP online, enviando comando de shutdown...\"\r\n       :log info $onlineMsg\r\n       :put \"Enviando comando de shutdown para PC $pcIP...\"\r\n       :local fileContent [/file get $outputFile contents]\r\n       /file set $outputFile contents=\"$fileContent$onlineMsg\\n\"\r\n       \r\n       # Preparar cabe\\E7alhos de autentica\\E7\\E3o\r\n       :local authHeader \"Authorization: Bearer $authToken\"\r\n       :local contentType \"Content-Type: application/json\"\r\n       :local headers \"$authHeader,$contentType\"\r\n       \r\n       :local fetchResult\r\n       :local httpStatus\r\n       :local responseData\r\n       \r\n       # Executar requisi\\E7\\E3o HTTP POST\r\n       :do {\r\n           /tool fetch url=$apiUrl http-method=post http-header-field=$headers dst-path=$responseFile\r\n           :set fetchResult \"finished\"\r\n           \r\n           # Ler resposta se dispon\\EDvel\r\n           :if ([:len [/file find name=$responseFile]] > 0) do={\r\n               :set responseData [/file get $responseFile contents]\r\n               /file remove $responseFile\r\n               :set httpStatus 200\r\n           } else={\r\n               :set httpStatus 500\r\n           }\r\n       } on-error={\r\n           :local timestamp [/system clock get date]\r\n           :local time [/system clock get time]\r\n           :local errorMsg \"[$timestamp $time] $logPrefix: Erro na requisi\\E7\\E3o HTTP para $apiUrl\"\r\n           :log error $errorMsg\r\n           :put \"ERRO: Falha na comunicacao com o PowerControl Service\"\r\n           :put \"Log salvo em: $outputFile\"\r\n           :local fileContent [/file get $outputFile contents]\r\n           /file set $outputFile contents=\"$fileContent$errorMsg\\n\"\r\n           :return false\r\n       }\r\n       \r\n       # Analisar resultado da requisi\\E7\\E3o\r\n       :if ($fetchResult = \"finished\") do={\r\n           :if ($httpStatus = 200) do={\r\n               :local timestamp [/system clock get date]\r\n               :local time [/system clock get time]\r\n               :local successMsg \"[$timestamp $time] $logPrefix: Comando de shutdown enviado com sucesso (HTTP 200)\"\r\n               :log info $successMsg\r\n               :put \"OK: PC $pcIP - Comando de shutdown executado com sucesso\"\r\n               :local fileContent [/file get $outputFile contents]\r\n               /file set $outputFile contents=\"$fileContent$successMsg\\n\"\r\n               \r\n               # Analisar resposta JSON se dispon\\EDvel\r\n               :if ([:len $responseData] > 0) do={\r\n                   :local timestamp [/system clock get date]\r\n                   :local time [/system clock get time]\r\n                   :local apiMsg \"[$timestamp $time] $logPrefix: Resposta da API: $responseData\"\r\n                   :log info $apiMsg\r\n                   :local fileContent [/file get $outputFile contents]\r\n                   /file set $outputFile contents=\"$fileContent$apiMsg\\n\"\r\n                   :if ([:find $responseData \"success\"] >= 0) do={\r\n                       :put \"OK: Status: shutdown sera executada\"\r\n                   }\r\n                   :if ([:find $responseData \"message\"] >= 0) do={\r\n                       :local msgStart [:find $responseData \"message\"]\r\n                       :local msgPart [:pick $responseData $msgStart ($msgStart + 50)]\r\n                       :put \"Info: Resposta: $msgPart\"\r\n                   }\r\n               }\r\n               \r\n               :local timestamp [/system clock get date]\r\n               :local time [/system clock get time]\r\n               :local hibernateMsg \"[$timestamp $time] $logPrefix: PC entrara em shutdown em instantes\"\r\n               :log info $hibernateMsg\r\n               :put \"Nota: PC entrara desligara\"\r\n               :put \"Para despertar: pressionar botao power ou usar Wake-on-LAN\"\r\n               :put \"Log salvo em: $outputFile\"\r\n               :local fileContent [/file get $outputFile contents]\r\n               /file set $outputFile contents=\"$fileContent$hibernateMsg\\n\"\r\n               :return true\r\n               \r\n           } else={\r\n               :if ($httpStatus = 401) do={\r\n                   :local timestamp [/system clock get date]\r\n                   :local time [/system clock get time]\r\n                   :local authMsg \"[$timestamp $time] $logPrefix: Erro de autenticacao (HTTP 401) - Token invalido\"\r\n                   :log error $authMsg\r\n                   :put \"ERRO: Erro de Autenticacao: Verifique o Bearer Token\"\r\n                   :local fileContent [/file get $outputFile contents]\r\n                   /file set $outputFile contents=\"$fileContent$authMsg\\n\"\r\n               } else={\r\n                   :local timestamp [/system clock get date]\r\n                   :local time [/system clock get time]\r\n                   :local warnMsg \"[$timestamp $time] $logPrefix: Servico respondeu com HTTP $httpStatus\"\r\n                   :log warning $warnMsg\r\n                   :put \"Aviso: Resposta inesperada: HTTP $httpStatus\"\r\n                   :local fileContent [/file get $outputFile contents]\r\n                   /file set $outputFile contents=\"$fileContent$warnMsg\\n\"\r\n               }\r\n               :put \"Log salvo em: $outputFile\"\r\n               :return false\r\n           }\r\n       } else={\r\n           :local timestamp [/system clock get date]\r\n           :local time [/system clock get time]\r\n           :local failMsg \"[$timestamp $time] $logPrefix: Falha na requisicao HTTP (status: $fetchResult)\"\r\n           :log error $failMsg\r\n           :put \"ERRO: Falha na requisicao: $fetchResult\"\r\n           :put \"Log salvo em: $outputFile\"\r\n           :local fileContent [/file get $outputFile contents]\r\n           /file set $outputFile contents=\"$fileContent$failMsg\\n\"\r\n           :return false\r\n       }\r\n\r\n27   name=\"mkt1_ping_test\" owner=\"admin\" \r\n     policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon \r\n     dont-require-permissions=no run-count=0 source=\r\n       # pind dns \r\n       :log info \"mkt1_ping_test Running\"\r\n       /tool/ ping address=8.8.8.8 count=4 interval=0.5\r\n\r\n"},{"timestamp":"2025-09-18T16:06:04.813109","type":"CONNECTION","message":"SCRIPT_PARSE_COMPLETE - Parsed 0 scripts matching user level 1"},{"timestamp":"2025-09-18T16:06:04.828765","type":"CONNECTION","message":"SCRIPT_DISCOVERY_COMPLETE - Found 0 accessible scripts"},{"timestamp":"2025-09-18T19:34:06.087215","type":"CONNECTION","message":"DISCONNECT_START - Initiating SSH session termination"},{"timestamp":"2025-09-18T19:34:06.092272","type":"CONNECTION","message":"DISCONNECT_COMPLETE - SSH client closed"},{"timestamp":"2025-09-18T19:34:06.096836","type":"SESSION_END","message":"SSH session ended"}]}